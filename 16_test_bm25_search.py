import os
import requests
import time
import re
import pandas as pd
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

SEARCH_SERVICE_NAME = os.getenv("AZURE_SEARCH_SERVICE_NAME")
SEARCH_API_KEY = os.getenv("AZURE_SEARCH_API_KEY")
INDEX_NAME = os.getenv("AZURE_SEARCH_INDEX_NAME")

# Creating the dataframe with all the given data
data = [
    (0, "Jak√© p≈ô√≠lohy mus√≠ ≈æadatel dolo≈æit s ≈æ√°dost√≠ o podporu - Prohl√°≈°en√≠ o p≈ôijatelnosti ≈æadatele/partnera", "56"),
    (1, "Jak√© p≈ô√≠lohy mus√≠ ≈æadatel dolo≈æit s ≈æ√°dost√≠ o podporu - Prohl√°≈°en√≠ o p≈ôijatelnosti ≈æadatele/partnera", "57"),
    (2, "Jak√© p≈ô√≠lohy mus√≠ ≈æadatel dolo≈æit s ≈æ√°dost√≠ o podporu - Prohl√°≈°en√≠ o p≈ôijatelnosti ≈æadatele/partnera", "97"),
    (3, "Jak√© p≈ô√≠lohy mus√≠ ≈æadatel dolo≈æit s ≈æ√°dost√≠ o podporu - Prohl√°≈°en√≠ o p≈ôijatelnosti ≈æadatele/partnera", "102"),
    (4, "Jak√© p≈ô√≠lohy mus√≠ ≈æadatel dolo≈æit s ≈æ√°dost√≠ o podporu - Doklad o obratu", "260"),
    (5, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (6, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (7, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (8, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (9, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (10, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (11, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (12, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (13, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (14, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (15, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (16, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (17, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (18, "Jak√© p≈ô√≠lohy mus√≠ ≈æadatel dolo≈æit s ≈æ√°dost√≠ o podporu - Doklad o typu a pr√°vn√≠ formƒõ p≈ô√≠jemce", "57"),
    (19, "Jak√© p≈ô√≠lohy mus√≠ ≈æadatel dolo≈æit s ≈æ√°dost√≠ o podporu - Prok√°z√°n√≠ vlastnick√© struktury", "57"),
    (20, "Jak√© p≈ô√≠lohy mus√≠ ≈æadatel dolo≈æit s ≈æ√°dost√≠ o podporu - Nepovinn√© p≈ô√≠lohy dle v√Ωzvy", "260"),
    (21, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (22, "Jak√© dokumenty mus√≠ ≈æadatel dolo≈æit p≈ôed vyd√°n√≠m pr√°vn√≠ho aktu o poskytnut√≠ podpory (PA)", "113"),
    (23, "Jak√© datum je pro splnƒõn√≠ indik√°toru nejd≈Øle≈æitƒõj≈°√≠?", "168"),
    (24, "Jak√° je lh≈Øta pro p≈ôedlo≈æen√≠ zpr√°vy o realizaci?", "125"),
    (25, "M≈Ø≈æe ≈æadatel zah√°jit realizaci projektu p≈ôed vyd√°n√≠m PA?", "126"),
    (26, "Jak se dokl√°daj√≠ pau≈°√°ln√≠ n√°klady?", "229"),
    (27, "Musej√≠ se u pau≈°√°ln√≠ch n√°klad≈Ø dokl√°dat √∫ƒçetn√≠ doklady?", "229"),
    (28, "V jak√© f√°zi mus√≠ b√Ωt stavebn√≠ z√°mƒõr p≈ôed vyd√°n√≠m PA?", "97"),
    (29, "Existuje vzor smlouvy o partnerstv√≠?", "114"),
    (30, "M≈Ø≈æe p≈ô√≠jemce fakturovat partnerovi slu≈æby realizovan√© pro projekt?", "63"),
    (31, "Jak je v projektu financov√°n partner?", "62"),
    (32, "Jak dlouho m≈Ø≈æe prob√≠hat realizace projektu?", "121"),
    (33, "Je mo≈æn√© prodlou≈æit realizaci projektu?", "124"),
    (34, "M≈Ø≈æe p≈ô√≠jemce nesouhlasit s ≈ô√≠dic√≠m org√°nem ohlednƒõ administrativn√≠ho ovƒõ≈ôen√≠ ≈ΩoP?", "247"),
    (35, "Jakou povinnou publicitu mus√≠ realizovat p≈ô√≠jemce projekt≈Ø?", "162"),
    (36, "Je p≈ô√≠jemce spr√°vcem nebo zpracovatelem osobn√≠ch √∫daj≈Ø v projektu?", "134"),
    (37, "Jak√© podm√≠nky mus√≠ v√Ωzkumn√° organizace plnit p≈ôi vyu≈æit√≠ dotovan√©ho vybaven√≠?", "153"),
    (38, "Jak urƒçovat kategorii podniku pro ve≈ôejn√© vysok√© ≈°koly?", "29"),
    (39, "Kdy se nevypl≈àuje list Skupina podnik≈Ø v p≈ô√≠loze ƒç. 6 Pp≈ΩP?", "59"),
    (40, "Jak√° je lh≈Øta pro odesl√°n√≠ dokument≈Ø po≈æadovan√Ωch k vyd√°n√≠ rozhodnut√≠?", "113"),
    (41, "Co se stane pokud ≈æadatel nedod√° po≈æadovan√© podklady?", "113"),
    (42, "Jak√Ωm zp≈Øsobem mus√≠ b√Ωt po≈æadovan√© dokumenty odesl√°ny?", "113"),
    (43, "Kdy je mo≈æn√© kombinovat ex-ante a ex-post platby na √∫rovni projektu?", "90"),
    (44, "Na z√°kladƒõ ƒçeho je urƒçen zp≈Øsob financov√°n√≠ projekt≈Ø?", "90"),
    (45, "Kdy se kontroluje st≈ôet z√°jm≈Ø?", "61"),
    (46, "Co je datum dosa≈æen√≠ indik√°toru?", "169"),
    (47, "Kdy se zaƒç√≠naj√≠ p≈ôedkl√°dat ZoR?", "125"),
    (48, "Jakou povinnou publicitu mus√≠ realizovat p≈ô√≠jemce projekt≈Ø?", "162"),
    (49, "Jak√© podm√≠nky mus√≠ b√Ωt plnƒõny p≈ôi vyu≈æit√≠ vybaven√≠ podpo≈ôen√©ho z dotace?", "153"),
    (50, "Jak√Ωmi zp≈Øsoby je zaji≈°tƒõno financov√°n√≠ projekt≈Ø?", "93"),
    (51, "V√Ωƒçet podstatn√Ωch zmƒõn zakl√°daj√≠c√≠ch zmƒõnu pr√°vn√≠ho aktu.", "142"),
    (52, "Vyu≈æ√≠v√° p≈ô√≠slu≈°n√Ω OP nƒõkterou z metod zjednodu≈°en√©ho vykazov√°n√≠ v√Ωdaj≈Ø?", "225"),
    (53, "Jak se vypoƒçte maxim√°ln√≠ poƒçet jednotek vyk√°zan√Ωch na zamƒõstnance?", "88"),
    (54, "Existuje vzor partnersk√© smlouvy?", "63"),
    (55, "Jak√° je povinn√° publicita pro projekty nad 500 000 EUR?", "162"),
    (56, "V jak√© dokumentaci jsou pravidla pro zad√°v√°n√≠ ve≈ôejn√Ωch zak√°zek?", "149"),
    (57, "Kdy p≈ô√≠jemce nemus√≠ dodr≈æovat postupy ve≈ôejn√Ωch zak√°zek?", "164"),
    (58, "Co je to jeden podnik?", "156"),
    (59, "Kdy se zaƒç√≠n√° p≈ôedkl√°dat zpr√°va o realizaci projektu?", "125"),
    (60, "Jak dlouho m≈Ø≈æe prob√≠hat realizace projektu?", "121")
]

df_test = pd.DataFrame(data, columns=["Nr.", "Question", "Pages"])

def perform_bm25_search(query, top_k=10):
    """Perform BM25 search using Azure AI Search."""
    url = f"https://{SEARCH_SERVICE_NAME}.search.windows.net/indexes/{INDEX_NAME}/docs/search?api-version=2023-11-01"
    headers = {"Content-Type": "application/json", "api-key": SEARCH_API_KEY}
    
    search_body = {
        "search": query,
        "queryType": "simple",
        "searchFields": "chunk",
        "select": "chunk_id,parent_id,chunk,title",
        "top": top_k
    }
    
    try:
        response = requests.post(url, headers=headers, json=search_body)
        if response.status_code != 200:
            print(f" Azure Search Error: {response.status_code} - {response.text}")
            return []
        return response.json().get("value", [])
    except Exception as e:
        print(f" Error in BM25 search: {e}")
        return []

def extract_page_number(chunk_id):
    """Extract the last number from chunk_id and add 1."""
    match = re.search(r"pages_(\d+)", chunk_id)
    return str(int(match.group(1)) + 1) if match else None

def evaluate_results_with_multiple_top_k(df, top_k_values=[5, 10, 25]):
    """Evaluate retrieval performance for different top_k values and save results to CSV."""
    results = []

    for index, row in df.iterrows():
        query = row["Question"]
        expected_pages = row["Pages"].split(", ")

        print(f"\n Query: {query}")
        print(f" Expected Pages: {expected_pages}")

        # Perform searches for different top_k values
        retrieved_pages_dict = {}
        match_results = {}

        for top_k in top_k_values:
            search_results = perform_bm25_search(query, top_k=top_k)
            retrieved_pages = [extract_page_number(doc["chunk_id"]) for doc in search_results if doc.get("chunk_id")]

            retrieved_pages_dict[f"Retrieved Pages (Top {top_k})"] = retrieved_pages
            match_results[f"Match Found (Top {top_k})"] = any(page in retrieved_pages for page in expected_pages)

        # Store results
        result_entry = {
            "Query": query,
            "Expected Pages": expected_pages
        }
        result_entry.update(retrieved_pages_dict)
        result_entry.update(match_results)
        results.append(result_entry)

        time.sleep(0.5)  # Prevent rate limiting

    # Convert to DataFrame and save to CSV
    df_results = pd.DataFrame(results)
    df_results.to_csv("bm25_retrieval_evaluation_multiple_top_k.csv", index=False)

    print("\nüìÅ Results saved to 'bm25_retrieval_evaluation_multiple_top_k.csv'")
    return df_results

# Run evaluation with different top_k values
evaluation_results_multiple_top_k = evaluate_results_with_multiple_top_k(df_test)

# Print results
print("\n Evaluation Results:")
print(evaluation_results_multiple_top_k.to_string(index=False))

def compute_accuracy(df, top_k_values=[5, 10, 25]):
    """Compute accuracy for each top_k value."""
    accuracy_results = {}

    for top_k in top_k_values:
        match_column = f"Match Found (Top {top_k})"
        accuracy = df[match_column].mean()  # Mean gives proportion of True values
        accuracy_results[f"Accuracy (Top {top_k})"] = accuracy

    return accuracy_results

# Compute accuracy for each top_k
accuracy_scores = compute_accuracy(evaluation_results_multiple_top_k)

# Convert to DataFrame for display and saving
df_accuracy = pd.DataFrame([accuracy_scores])

# Save accuracy results to CSV
df_accuracy.to_csv("bm25_accuracy_scores.csv", index=False)

# Print accuracy results
print("\n‚úÖ Accuracy Results:")
print(df_accuracy.to_string(index=False))